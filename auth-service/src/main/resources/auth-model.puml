@startuml Auth Service Data Model

!define table(x) class x << (T,#FFAAAA) >>
!define primary_key(x) <b>x</b>
!define foreign_key(x) <u>x</u>
!define unique(x) <color:green>x</color>
!define index(x) <color:blue>x</color>

title "Modèle de Données du Service d'Authentification"

' Définition des tables
table(users) {
    primary_key(id): BIGSERIAL
    unique(username): VARCHAR(20)
    unique(email): VARCHAR(50)
    password: VARCHAR(120)
}

table(roles) {
    primary_key(id): BIGSERIAL
    unique(name): VARCHAR(20)
}

table(user_roles) {
    primary_key(user_id): BIGINT
    primary_key(role_id): BIGINT
}

' Relations
users ||--o{ user_roles
roles ||--o{ user_roles

' Données initiales
object "Admin User" as admin_user {
    username = "admin"
    email = "admin@jeroka.com"
    password = "$2a$10$PYmzM..."
}

object "Jerome User" as jerome_user {
    username = "jerome"
    email = "jerome@jeroka.com"
}

object "ROLE_USER" as role_user {
    name = "ROLE_USER"
}

object "ROLE_MODERATOR" as role_mod {
    name = "ROLE_MODERATOR"
}

object "ROLE_ADMIN" as role_admin {
    name = "ROLE_ADMIN"
}

' Relations des données
admin_user --> role_admin : has role
admin_user --> role_user : has role
jerome_user --> role_admin : has role
jerome_user --> role_user : has role

note right of users
  Les mots de passe sont 
  hashés avec BCrypt
end note

note right of roles
  Rôles disponibles :
  - ROLE_USER
  - ROLE_MODERATOR
  - ROLE_ADMIN
end note

note bottom of user_roles
  Table de jointure
  many-to-many
end note

@enduml
