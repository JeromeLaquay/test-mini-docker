version: '3.9'

services:
  jeroka_db:
    image: postgres:15-alpine
    container_name: jeroka_db
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - backend

  auth-service:
    build: ./auth-service
    container_name: auth-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://jeroka_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      SERVER_PORT: ${AUTH_SERVICE_PORT}
    depends_on:
      - jeroka_db
    ports:
      - "${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}"
    networks:
      - backend

  subscription-service:
    ports:
      - "${SUBSCRIPTION_SERVICE_PORT}:${SUBSCRIPTION_SERVICE_PORT}"
    build: ./subscription-service
    container_name: subscription-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://jeroka_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${SUBSCRIPTION_SERVICE_PORT}
    depends_on:
      - jeroka_db
    networks:
      - backend

  album-service:
    ports:
      - "${ALBUM_SERVICE_PORT}:${ALBUM_SERVICE_PORT}"
    build: ./album-service
    container_name: album-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://jeroka_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${ALBUM_SERVICE_PORT}
    depends_on:
      - jeroka_db
    networks:
      - backend
    
  payment-service:
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    build: ./payment-service
    container_name: payment-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://jeroka_db:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${PAYMENT_SERVICE_PORT}
    depends_on:
      - jeroka_db
    networks:
      - backend

  api-gateway:
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    build: ./api-gateway
    container_name: api-gateway
    environment:
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: ${API_GATEWAY_PORT}
      # Configuration CORS
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDORIGINS: "${CORS_ALLOWED_ORIGINS}"
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDMETHODS: "${CORS_ALLOWED_METHODS}"
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWEDHEADERS: "${CORS_ALLOWED_HEADERS}"
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_ALLOWCREDENTIALS: "${CORS_ALLOW_CREDENTIALS}"
      SPRING_CLOUD_GATEWAY_GLOBALCORS_CORSCONFIGURATIONS_[/**]_MAXAGE: "${CORS_MAX_AGE}"
      # Configuration des timeouts
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_CONNECT-TIMEOUT: "5000"
      SPRING_CLOUD_GATEWAY_HTTPCLIENT_RESPONSE-TIMEOUT: "5000ms"
      ROUTE_SUBSCRIPTION_SERVICE: "${ROUTE_SUBSCRIPTION_SERVICE}"
      ROUTE_AUTH_SERVICE: "${ROUTE_AUTH_SERVICE}"
      ROUTE_ALBUM_SERVICE: "${ROUTE_ALBUM_SERVICE}"
      ROUTE_PAYMENT_SERVICE: "${ROUTE_PAYMENT_SERVICE}"
      SPRINGDOC_API_DOCS_URLS_0_NAME: album-service
      SPRINGDOC_API_DOCS_URLS_0_URL: http://album-service:8083/v3/api-docs
      SPRINGDOC_API_DOCS_URLS_1_NAME: auth-service
      SPRINGDOC_API_DOCS_URLS_1_URL: http://auth-service:8081/v3/api-docs
      SPRINGDOC_API_DOCS_URLS_2_NAME: subscription-service
      SPRINGDOC_API_DOCS_URLS_2_URL: http://subscription-service:8084/v3/api-docs
      SPRINGDOC_API_DOCS_URLS_3_NAME: payment-service
      SPRINGDOC_API_DOCS_URLS_3_URL: http://payment-service:8085/v3/api-docs
    depends_on:
      - auth-service
      - album-service
      - subscription-service
    networks:
      - backend

  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT}:80"
    depends_on:
      - api-gateway
    networks:
      - backend

networks:
  backend:
    driver: bridge